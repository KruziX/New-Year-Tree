import random
from .. import loader, utils
from datetime import timedelta
from telethon import functions
from telethon.tl.types import Message


@loader.tds
class FarmIrisMod(loader.Module):
    """–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∫–æ–∏–Ω–æ–≤ –≤ –∏—Ä–∏—Å–±–æ—Ç–µ"""

    strings = {
        "name": "tbio",
        "tbion": "<i>‚úÖ–û—Ç–ª–æ–∂–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –∞–≤—Ç–æ—Å–º–µ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞, –≤—Å—ë –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...</i>",
        "tbio_already": "<i>–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ</i>",
        "tbif": "<i>‚ùå–ê–≤—Ç–æ—Å–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n‚ò¢Ô∏è–ù–∞–¥—é–ø–∞–Ω–æ:</i> <b>%coins% i¬¢</b>",
         }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.myid = (await client.get_me()).id
        self.iris = 2109543251

    async def tbioncmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Å–º–µ–Ω—É"""
        status = self.db.get(self.name, "status", False)
        if status:
            return await message.edit(self.strings["tbio_already"])
        self.db.set(self.name, "status", True)
        await self.client.send_message(
            self.iris, ".bio random(üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –†–µ–∫–ª–∞–º–∞ - @KruzAd, üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –ü–æ–º–æ—â—å - @KruziX)", schedule=timedelta(seconds=20)
        )
        await message.edit(self.strings["tbion"])

    async def tbifcmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Å–º–µ–Ω—É"""
        self.db.set(self.name, "status", False)
        
    async def tbiocmd(self, message):
        """–°–º–µ–Ω–∞ –±–∏–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞?"""
        
    async def watcher(self, event):
        if not isinstance(event, Message):
            return
        chat = utils.get_chat_id(event)
        if chat != self.iris:
            return
        status = self.db.get(self.name, "status", False)
        if not status:
            return
        if event.raw_text == ".bio random(üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –†–µ–∫–ª–∞–º–∞ - @KruzAd, üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –ü–æ–º–æ—â—å - @KruziX)"
                   return await self.client.send_message(
                self.iris, ".bio random(üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –†–µ–∫–ª–∞–º–∞ - @KruzAd, üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –ü–æ–º–æ—â—å - @KruziX)", schedule=timedelta(minutes=random.randint(1, 20))
            )
        if event.sender_id != self.iris:
            return
        if "–ù–ï–ó–ê–ß–Å–¢!" in event.raw_text:
            args = [int(x) for x in event.raw_text.split() if x.isnumeric()]
            randelta = random.randint(20, 60)
            if len(args) == 4:
                delta = timedelta(
                    hours=args[1], minutes=args[2], seconds=args[3] + randelta
                )
            elif len(args) == 3:
                delta = timedelta(minutes=args[1], seconds=args[2] + randelta)
            elif len(args) == 2:
                delta = timedelta(seconds=args[1] + randelta)
            else:
                return
            sch = (
                await self.client(
                    functions.messages.GetScheduledHistoryRequest(self.iris, 1488)
                )
            ).messages
            await self.client(
                functions.messages.DeleteScheduledMessagesRequest(
                    self.iris, id=[x.id for x in sch]
                )
            )
            return await self.client.send_message(self.iris, ".bio random(üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –†–µ–∫–ª–∞–º–∞ - @KruzAd, üë¶ @KruzProjects - –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç –º–µ–Ω—è. üíº –ü–æ–º–æ—â—å - @KruziX)", schedule=delta)
